// Code generated by MockGen. DO NOT EDIT.
// Source: internal/service/order.go

// Package mock_service is a generated GoMock package.
package mock_service

import (
	models "cloud-render/internal/models"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// MockOrderProvider is a mock of OrderProvider interface.
type MockOrderProvider struct {
	ctrl     *gomock.Controller
	recorder *MockOrderProviderMockRecorder
}

// MockOrderProviderMockRecorder is the mock recorder for MockOrderProvider.
type MockOrderProviderMockRecorder struct {
	mock *MockOrderProvider
}

// NewMockOrderProvider creates a new mock instance.
func NewMockOrderProvider(ctrl *gomock.Controller) *MockOrderProvider {
	mock := &MockOrderProvider{ctrl: ctrl}
	mock.recorder = &MockOrderProviderMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockOrderProvider) EXPECT() *MockOrderProviderMockRecorder {
	return m.recorder
}

// Create mocks base method.
func (m *MockOrderProvider) Create(order models.Order) (int64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Create", order)
	ret0, _ := ret[0].(int64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Create indicates an expected call of Create.
func (mr *MockOrderProviderMockRecorder) Create(order interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockOrderProvider)(nil).Create), order)
}

// GetMany mocks base method.
func (m *MockOrderProvider) GetMany(id int64) ([]models.Order, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetMany", id)
	ret0, _ := ret[0].([]models.Order)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetMany indicates an expected call of GetMany.
func (mr *MockOrderProviderMockRecorder) GetMany(id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetMany", reflect.TypeOf((*MockOrderProvider)(nil).GetMany), id)
}

// GetOne mocks base method.
func (m *MockOrderProvider) GetOne(id int64) (*models.Order, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetOne", id)
	ret0, _ := ret[0].(*models.Order)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetOne indicates an expected call of GetOne.
func (mr *MockOrderProviderMockRecorder) GetOne(id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetOne", reflect.TypeOf((*MockOrderProvider)(nil).GetOne), id)
}

// SoftDelete mocks base method.
func (m *MockOrderProvider) SoftDelete(id int64) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SoftDelete", id)
	ret0, _ := ret[0].(error)
	return ret0
}

// SoftDelete indicates an expected call of SoftDelete.
func (mr *MockOrderProviderMockRecorder) SoftDelete(id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SoftDelete", reflect.TypeOf((*MockOrderProvider)(nil).SoftDelete), id)
}

// UpdateDownloadLink mocks base method.
func (m *MockOrderProvider) UpdateDownloadLink(orderId int64, downloadLink string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateDownloadLink", orderId, downloadLink)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateDownloadLink indicates an expected call of UpdateDownloadLink.
func (mr *MockOrderProviderMockRecorder) UpdateDownloadLink(orderId, downloadLink interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateDownloadLink", reflect.TypeOf((*MockOrderProvider)(nil).UpdateDownloadLink), orderId, downloadLink)
}

// UpdateStatus mocks base method.
func (m *MockOrderProvider) UpdateStatus(orderId, statusId int64) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateStatus", orderId, statusId)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateStatus indicates an expected call of UpdateStatus.
func (mr *MockOrderProviderMockRecorder) UpdateStatus(orderId, statusId interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateStatus", reflect.TypeOf((*MockOrderProvider)(nil).UpdateStatus), orderId, statusId)
}
