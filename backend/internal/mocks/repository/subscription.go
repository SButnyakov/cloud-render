// Code generated by MockGen. DO NOT EDIT.
// Source: service/subscription.go

// Package mock_service is a generated GoMock package.
package mock_service

import (
	models "cloud-render/internal/models"
	reflect "reflect"
	time "time"

	gomock "github.com/golang/mock/gomock"
)

// MockSubscriptionProvider is a mock of SubscriptionProvider interface.
type MockSubscriptionProvider struct {
	ctrl     *gomock.Controller
	recorder *MockSubscriptionProviderMockRecorder
}

// MockSubscriptionProviderMockRecorder is the mock recorder for MockSubscriptionProvider.
type MockSubscriptionProviderMockRecorder struct {
	mock *MockSubscriptionProvider
}

// NewMockSubscriptionProvider creates a new mock instance.
func NewMockSubscriptionProvider(ctrl *gomock.Controller) *MockSubscriptionProvider {
	mock := &MockSubscriptionProvider{ctrl: ctrl}
	mock.recorder = &MockSubscriptionProviderMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockSubscriptionProvider) EXPECT() *MockSubscriptionProviderMockRecorder {
	return m.recorder
}

// Create mocks base method.
func (m *MockSubscriptionProvider) Create(subscription models.Subscription, payment models.Payment) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Create", subscription, payment)
	ret0, _ := ret[0].(error)
	return ret0
}

// Create indicates an expected call of Create.
func (mr *MockSubscriptionProviderMockRecorder) Create(subscription, payment interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockSubscriptionProvider)(nil).Create), subscription, payment)
}

// GetExpireDate mocks base method.
func (m *MockSubscriptionProvider) GetExpireDate(uid int64) (*time.Time, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetExpireDate", uid)
	ret0, _ := ret[0].(*time.Time)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetExpireDate indicates an expected call of GetExpireDate.
func (mr *MockSubscriptionProviderMockRecorder) GetExpireDate(uid interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetExpireDate", reflect.TypeOf((*MockSubscriptionProvider)(nil).GetExpireDate), uid)
}

// Update mocks base method.
func (m *MockSubscriptionProvider) Update(subscription models.Subscription, payment models.Payment) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Update", subscription, payment)
	ret0, _ := ret[0].(error)
	return ret0
}

// Update indicates an expected call of Update.
func (mr *MockSubscriptionProviderMockRecorder) Update(subscription, payment interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Update", reflect.TypeOf((*MockSubscriptionProvider)(nil).Update), subscription, payment)
}
