// Code generated by MockGen. DO NOT EDIT.
// Source: http/api/order.go

// Package mock_api is a generated GoMock package.
package mock_api

import (
	dto "cloud-render/internal/dto"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// MockOneOrderProivder is a mock of OneOrderProivder interface.
type MockOneOrderProivder struct {
	ctrl     *gomock.Controller
	recorder *MockOneOrderProivderMockRecorder
}

// MockOneOrderProivderMockRecorder is the mock recorder for MockOneOrderProivder.
type MockOneOrderProivderMockRecorder struct {
	mock *MockOneOrderProivder
}

// NewMockOneOrderProivder creates a new mock instance.
func NewMockOneOrderProivder(ctrl *gomock.Controller) *MockOneOrderProivder {
	mock := &MockOneOrderProivder{ctrl: ctrl}
	mock.recorder = &MockOneOrderProivderMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockOneOrderProivder) EXPECT() *MockOneOrderProivderMockRecorder {
	return m.recorder
}

// GetOneOrder mocks base method.
func (m *MockOneOrderProivder) GetOneOrder(id int64) (*dto.GetOrderDTO, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetOneOrder", id)
	ret0, _ := ret[0].(*dto.GetOrderDTO)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetOneOrder indicates an expected call of GetOneOrder.
func (mr *MockOneOrderProivderMockRecorder) GetOneOrder(id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetOneOrder", reflect.TypeOf((*MockOneOrderProivder)(nil).GetOneOrder), id)
}
