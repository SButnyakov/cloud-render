// Code generated by MockGen. DO NOT EDIT.
// Source: http/api/user.go

// Package mock_api is a generated GoMock package.
package mock_api

import (
	dto "cloud-render/internal/dto"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// MockUserInfoProvider is a mock of UserInfoProvider interface.
type MockUserInfoProvider struct {
	ctrl     *gomock.Controller
	recorder *MockUserInfoProviderMockRecorder
}

// MockUserInfoProviderMockRecorder is the mock recorder for MockUserInfoProvider.
type MockUserInfoProviderMockRecorder struct {
	mock *MockUserInfoProvider
}

// NewMockUserInfoProvider creates a new mock instance.
func NewMockUserInfoProvider(ctrl *gomock.Controller) *MockUserInfoProvider {
	mock := &MockUserInfoProvider{ctrl: ctrl}
	mock.recorder = &MockUserInfoProviderMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockUserInfoProvider) EXPECT() *MockUserInfoProviderMockRecorder {
	return m.recorder
}

// GetExpireDateWithUserInfo mocks base method.
func (m *MockUserInfoProvider) GetExpireDateWithUserInfo(uid int64) (*dto.UserInfoDTO, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetExpireDateWithUserInfo", uid)
	ret0, _ := ret[0].(*dto.UserInfoDTO)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetExpireDateWithUserInfo indicates an expected call of GetExpireDateWithUserInfo.
func (mr *MockUserInfoProviderMockRecorder) GetExpireDateWithUserInfo(uid interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetExpireDateWithUserInfo", reflect.TypeOf((*MockUserInfoProvider)(nil).GetExpireDateWithUserInfo), uid)
}
