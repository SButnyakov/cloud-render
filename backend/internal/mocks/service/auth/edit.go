// Code generated by MockGen. DO NOT EDIT.
// Source: http/auth/edit.go

// Package mock_auth is a generated GoMock package.
package mock_auth

import (
	dto "cloud-render/internal/dto"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// MockUserEditor is a mock of UserEditor interface.
type MockUserEditor struct {
	ctrl     *gomock.Controller
	recorder *MockUserEditorMockRecorder
}

// MockUserEditorMockRecorder is the mock recorder for MockUserEditor.
type MockUserEditorMockRecorder struct {
	mock *MockUserEditor
}

// NewMockUserEditor creates a new mock instance.
func NewMockUserEditor(ctrl *gomock.Controller) *MockUserEditor {
	mock := &MockUserEditor{ctrl: ctrl}
	mock.recorder = &MockUserEditorMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockUserEditor) EXPECT() *MockUserEditorMockRecorder {
	return m.recorder
}

// EditUser mocks base method.
func (m *MockUserEditor) EditUser(user dto.EditUserDTO) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "EditUser", user)
	ret0, _ := ret[0].(error)
	return ret0
}

// EditUser indicates an expected call of EditUser.
func (mr *MockUserEditorMockRecorder) EditUser(user interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "EditUser", reflect.TypeOf((*MockUserEditor)(nil).EditUser), user)
}
