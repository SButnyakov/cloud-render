// Code generated by MockGen. DO NOT EDIT.
// Source: http/auth/refresh.go

// Package mock_auth is a generated GoMock package.
package mock_auth

import (
	dto "cloud-render/internal/dto"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// MockUserReauthorizer is a mock of UserReauthorizer interface.
type MockUserReauthorizer struct {
	ctrl     *gomock.Controller
	recorder *MockUserReauthorizerMockRecorder
}

// MockUserReauthorizerMockRecorder is the mock recorder for MockUserReauthorizer.
type MockUserReauthorizerMockRecorder struct {
	mock *MockUserReauthorizer
}

// NewMockUserReauthorizer creates a new mock instance.
func NewMockUserReauthorizer(ctrl *gomock.Controller) *MockUserReauthorizer {
	mock := &MockUserReauthorizer{ctrl: ctrl}
	mock.recorder = &MockUserReauthorizerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockUserReauthorizer) EXPECT() *MockUserReauthorizerMockRecorder {
	return m.recorder
}

// ReauthUser mocks base method.
func (m *MockUserReauthorizer) ReauthUser(userDTO dto.ReAuthUserDTO) (*dto.ReAuthUserDTO, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ReauthUser", userDTO)
	ret0, _ := ret[0].(*dto.ReAuthUserDTO)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ReauthUser indicates an expected call of ReauthUser.
func (mr *MockUserReauthorizerMockRecorder) ReauthUser(userDTO interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ReauthUser", reflect.TypeOf((*MockUserReauthorizer)(nil).ReauthUser), userDTO)
}
