// Code generated by MockGen. DO NOT EDIT.
// Source: http/auth/signin.go

// Package mock_auth is a generated GoMock package.
package mock_auth

import (
	dto "cloud-render/internal/dto"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// MockUserAuthorizer is a mock of UserAuthorizer interface.
type MockUserAuthorizer struct {
	ctrl     *gomock.Controller
	recorder *MockUserAuthorizerMockRecorder
}

// MockUserAuthorizerMockRecorder is the mock recorder for MockUserAuthorizer.
type MockUserAuthorizerMockRecorder struct {
	mock *MockUserAuthorizer
}

// NewMockUserAuthorizer creates a new mock instance.
func NewMockUserAuthorizer(ctrl *gomock.Controller) *MockUserAuthorizer {
	mock := &MockUserAuthorizer{ctrl: ctrl}
	mock.recorder = &MockUserAuthorizerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockUserAuthorizer) EXPECT() *MockUserAuthorizerMockRecorder {
	return m.recorder
}

// AuthUser mocks base method.
func (m *MockUserAuthorizer) AuthUser(userDTO dto.AuthUserDTO) (*dto.AuthUserDTO, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AuthUser", userDTO)
	ret0, _ := ret[0].(*dto.AuthUserDTO)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// AuthUser indicates an expected call of AuthUser.
func (mr *MockUserAuthorizerMockRecorder) AuthUser(userDTO interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AuthUser", reflect.TypeOf((*MockUserAuthorizer)(nil).AuthUser), userDTO)
}
