// Code generated by MockGen. DO NOT EDIT.
// Source: http/buffer/update.go

// Package mock_buffer is a generated GoMock package.
package mock_buffer

import (
	dto "cloud-render/internal/dto"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// MockOrderStatusUpdater is a mock of OrderStatusUpdater interface.
type MockOrderStatusUpdater struct {
	ctrl     *gomock.Controller
	recorder *MockOrderStatusUpdaterMockRecorder
}

// MockOrderStatusUpdaterMockRecorder is the mock recorder for MockOrderStatusUpdater.
type MockOrderStatusUpdaterMockRecorder struct {
	mock *MockOrderStatusUpdater
}

// NewMockOrderStatusUpdater creates a new mock instance.
func NewMockOrderStatusUpdater(ctrl *gomock.Controller) *MockOrderStatusUpdater {
	mock := &MockOrderStatusUpdater{ctrl: ctrl}
	mock.recorder = &MockOrderStatusUpdaterMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockOrderStatusUpdater) EXPECT() *MockOrderStatusUpdaterMockRecorder {
	return m.recorder
}

// UpdateOrderStatus mocks base method.
func (m *MockOrderStatusUpdater) UpdateOrderStatus(dto dto.UpdateOrderStatusDTO) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateOrderStatus", dto)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateOrderStatus indicates an expected call of UpdateOrderStatus.
func (mr *MockOrderStatusUpdaterMockRecorder) UpdateOrderStatus(dto interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateOrderStatus", reflect.TypeOf((*MockOrderStatusUpdater)(nil).UpdateOrderStatus), dto)
}
