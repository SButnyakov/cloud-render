version: "3"

networks:
    isolation-network:
        driver: bridge

services:
    sso:
        build:
            context: ./backend
            dockerfile: ./cmd/auth/Dockerfile
        container_name: sso
        ports:
            - 8081:8081
        depends_on:
            postgres:
                condition: service_healthy
        networks:
            - isolation-network
    api:
        build:
            context: ./backend
            dockerfile: ./cmd/api/Dockerfile
        container_name: api
        ports:
            - 8080:8080
            - 8082:8082
        depends_on:
            postgres:
                condition: service_healthy
            redis:
                condition: service_healthy
        networks:
            - isolation-network
    frontend:
        build: 
            context: ./frontend
            dockerfile: ./Dockerfile
        container_name: fontend_cont
        ports:
            - 3000:3000
        depends_on:
            - sso
            - api
        networks:
            - isolation-network
    postgres:
        image: postgres:16.0-bookworm
        restart: always
        container_name: data_base_psql
        build: ./backend/migrations/schemas/
        environment:
            POSTGRES_DB: "cloud_render_api"
            POSTGRES_USER: "user"
            POSTGRES_PASSWORD: "password"
            PGDATA: "/var/lib/postgresql/data/pgdata"
        volumes:
            - ./backend/migrations/schemas/:/docker-entrypoint-initdb.d/
            - dbvolume:/var/lib/postgresql/data
        ports:
            - 5432:5432
        healthcheck:
            test: ["CMD-SHELL", "pg_isready -U user -d cloud_render_api"]
            interval: 10s
            timeout: 5s
            retries: 5
            start_period: 10s
        networks:
            - isolation-network
    redis:
        image: redis:latest
        restart: always
        ports:
            - "6379:6379"
        volumes:
            - redisvol:/root/redis
            #- /path/to/local/redis.conf:/usr/local/etc/redis/redis.conf
        environment:
            - REDIS_PASSWORD=password
            - REDIS_PORT=6379
            - REDIS_DATABASES=16
        healthcheck:
            test: [ "CMD", "redis-cli", "--raw", "incr", "ping" ]
            interval: 10s
            timeout: 5s
            retries: 5
            start_period: 10s
        networks:
            - isolation-network
volumes:
    dbvolume:
    redisvol:
#for service
#
#   - 'volume_name':'path_in_container'
#after specify used volumes
